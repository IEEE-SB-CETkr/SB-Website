<!--
 * Website for IEEE SB CETKR
 * Copyright (C) 2024 IEEE Student Branch CETKR
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
-->
---
import { Image } from 'astro:assets';

interface GalleryItem {
  type: 'image' | 'video';
  url: string;
  alt?: string;
  caption?: string;
}

interface Props {
  items: GalleryItem[];
  className?: string;
}

const { items = [], className = '' } = Astro.props;
const galleryId = `gallery-${Math.random().toString(36).substring(2, 9)}`;
---

<div id={galleryId} class:list={['gallery-grid', className]}>
  {items.map((item, index) => (
    <a
      href={item.url}
      data-type={item.type}
      data-caption={item.caption}
      data-index={index}
      class="gallery-item group"
      aria-label={`View item ${index + 1}: ${item.caption || item.alt || ''}`}
    >
      {item.type === 'image' ? (
        <Image
          src={item.url}
          alt={item.alt || 'Gallery image'}
          width={400}
          height={300}
          format="webp"
          quality={80}
          loading="lazy"
          class="gallery-thumbnail"
        />
      ) : (
        <div class="video-thumbnail-wrapper">
          <video
            src={item.url}
            class="gallery-thumbnail"
            preload="metadata"
            muted
            loop
            playsinline
          >
            Your browser does not support the video tag.
          </video>
          <div class="video-play-icon">
            <svg viewBox="0 0 20 20" fill="currentColor"><path d="M6.3 2.841A1.5 1.5 0 0 0 4 4.118v11.764a1.5 1.5 0 0 0 2.3 1.277l9.344-5.882a1.5 1.5 0 0 0 0-2.554L6.3 2.84Z"></path></svg>
          </div>
        </div>
      )}
      {item.caption && <div class="caption">{item.caption}</div>}
    </a>
  ))}
</div>

<div id="lightbox" class="lightbox-overlay" style="display: none;" role="dialog" aria-modal="true" aria-labelledby="lightbox-caption">
  <div class="lightbox-content">
    <div class="lightbox-media-wrapper">
      <img id="lightbox-image" class="lightbox-media" style="display: none;" alt="Lightbox view" />
      <video id="lightbox-video" class="lightbox-media" style="display: none;" controls playsinline></video>
    </div>
    <div id="lightbox-caption" class="lightbox-caption"></div>
  </div>
  <button id="lightbox-close" class="lightbox-button close" aria-label="Close lightbox">
    <svg viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path d="M6 18 18 6M6 6l12 12"></path></svg>
  </button>
  <button id="lightbox-prev" class="lightbox-button prev" aria-label="Previous item">
    <svg viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path d="m15 19-7-7 7-7"></path></svg>
  </button>
  <button id="lightbox-next" class="lightbox-button next" aria-label="Next item">
    <svg viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path d="m9 5 7 7-7 7"></path></svg>
  </button>
  <div id="lightbox-counter" class="lightbox-counter"></div>
</div>

<script define:vars={{ galleryId, items }}>
  document.addEventListener('DOMContentLoaded', () => {
    const gallery = document.getElementById(galleryId);
    if (!gallery) return;

    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxVideo = document.getElementById('lightbox-video');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const closeBtn = document.getElementById('lightbox-close');
    const prevBtn = document.getElementById('lightbox-prev');
    const nextBtn = document.getElementById('lightbox-next');

    let currentIndex = 0;
    let touchStartX = 0;
    let touchEndX = 0;

    const galleryItems = Array.from(gallery.querySelectorAll('.gallery-item'));

    function showItem(index) {
      currentIndex = index;
      const item = galleryItems[index];
      const type = item.dataset.type;
      const url = item.href;
      const caption = item.dataset.caption;

      if (type === 'image') {
        lightboxImage.src = url;
        lightboxImage.style.display = 'block';
        lightboxVideo.style.display = 'none';
        lightboxVideo.pause();
        lightboxVideo.src = '';
      } else {
        lightboxVideo.src = url;
        lightboxVideo.style.display = 'block';
        lightboxVideo.autoplay = true;
        lightboxImage.style.display = 'none';
        lightboxImage.src = '';
      }

      lightboxCaption.textContent = caption || '';
      lightboxCounter.textContent = `${index + 1} / ${galleryItems.length}`;

      lightbox.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      prevBtn.style.display = galleryItems.length > 1 ? 'flex' : 'none';
      nextBtn.style.display = galleryItems.length > 1 ? 'flex' : 'none';

      preload(currentIndex + 1);
      preload(currentIndex - 1);
    }

    function hideLightbox() {
      lightbox.style.display = 'none';
      lightboxVideo.pause();
      document.body.style.overflow = '';
    }

    function showNext() {
      showItem((currentIndex + 1) % galleryItems.length);
    }

    function showPrev() {
      showItem((currentIndex - 1 + galleryItems.length) % galleryItems.length);
    }
    
    function preload(index) {
      const total = galleryItems.length;
      if (index < 0 || index >= total) return;
      const item = galleryItems[index];
      if (item.dataset.type === 'image') {
        const img = new Image();
        img.src = item.href;
      }
    }

    gallery.addEventListener('click', (e) => {
      e.preventDefault();
      const targetItem = e.target.closest('.gallery-item');
      if (targetItem) {
        showItem(parseInt(targetItem.dataset.index));
      }
    });

    closeBtn.addEventListener('click', hideLightbox);
    nextBtn.addEventListener('click', showNext);
    prevBtn.addEventListener('click', showPrev);

    document.addEventListener('keydown', (e) => {
      if (lightbox.style.display === 'flex') {
        if (e.key === 'Escape') hideLightbox();
        if (e.key === 'ArrowRight') showNext();
        if (e.key === 'ArrowLeft') showPrev();
      }
    });

    lightbox.addEventListener('touchstart', e => { touchStartX = e.changedTouches[0].screenX }, { passive: true });
    lightbox.addEventListener('touchend', e => {
      touchEndX = e.changedTouches[0].screenX;
      if (touchEndX < touchStartX - 50) showNext();
      if (touchEndX > touchStartX + 50) showPrev();
    });
  });
</script>

<style>
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
  }

  .gallery-item {
    aspect-ratio: 4 / 3;
    border-radius: 0.5rem;
    overflow: hidden;
    position: relative;
    cursor: pointer;
    background-color: #1a202c;
    border: 1px solid #2d3748;
    transition: border-color 0.3s, transform 0.3s;
  }

  .gallery-item:hover {
    border-color: #4fd1c5;
    transform: scale(1.03);
  }

  .gallery-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .gallery-item:hover .gallery-thumbnail {
    transform: scale(1.1);
  }
  
  .video-thumbnail-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .video-play-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 3.5rem;
    height: 3.5rem;
    background: rgba(0, 0, 0, 0.4);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: transform 0.3s, background-color 0.3s;
    backdrop-filter: blur(4px);
  }
  
  .video-play-icon svg {
    width: 1.75rem;
    height: 1.75rem;
  }

  .gallery-item:hover .video-play-icon {
    transform: translate(-50%, -50%) scale(1.1);
    background: rgba(0, 0, 0, 0.6);
  }

  .caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1.5rem 0.75rem 0.75rem;
    font-size: 0.875rem;
    color: #e2e8f0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.3s, transform 0.3s;
  }

  .gallery-item:hover .caption {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Lightbox */
  .lightbox-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(8px);
    z-index: 50;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    animation: fadeIn 0.3s ease;
  }

  .lightbox-content {
    width: 100%;
    height: 100%;
    max-width: 90vw;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .lightbox-media-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .lightbox-media {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 0.5rem;
  }

  .lightbox-button {
    position: fixed;
    z-index: 51;
    background: rgba(30, 30, 30, 0.6);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s, transform 0.2s;
  }
  .lightbox-button:hover {
    background: rgba(0, 0, 0, 0.8);
    transform: scale(1.1);
  }
  .lightbox-button.close {
    top: 1rem;
    right: 1rem;
  }
  .lightbox-button.prev {
    top: 50%;
    left: 1rem;
    transform: translateY(-50%);
  }
  .lightbox-button.next {
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
  }
  .lightbox-button svg {
    width: 1.5rem;
    height: 1.5rem;
  }

  .lightbox-caption {
    position: absolute;
    bottom: -2.5rem;
    color: #e2e8f0;
    padding: 0.5rem 1rem;
    text-align: center;
    width: 100%;
    font-size: 0.9rem;
  }
  
  .lightbox-counter {
    position: absolute;
    top: -2.5rem;
    color: #a0aec0;
    font-size: 0.9rem;
  }
  
  @media (max-width: 768px) {
    .lightbox-button.prev { left: 0.5rem; }
    .lightbox-button.next { right: 0.5rem; }
    .lightbox-content { max-width: 100vw; max-height: 100vh; }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>